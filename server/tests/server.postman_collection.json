{
	"info": {
		"_postman_id": "e05d7907-3e86-44ec-b68c-f1b173970aa0",
		"name": "AssignmentAlly Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8035461"
	},
	"item": [
		{
			"name": "Create Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required field 'message'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.have.property('message');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"The 'message' field is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is in an acceptable range\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the 'message' field value is 'Successfully registered'\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.message).to.equal(\"Successfully registered\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"password\": \"test\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "current-user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();\r",
							"\r",
							"pm.globals.set(\"user1Username\", responseData.user.username);\r",
							"pm.globals.set(\"user1Id\", responseData.user.id);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/current-user",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"current-user"
					]
				}
			},
			"response": []
		},
		{
			"name": "getAllGroups",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/groups/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field 'message'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('message');",
							"});",
							"",
							"",
							"pm.test(\"The 'message' field is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is in an acceptable range\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'message' field value is 'Logout successful'\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.equal(\"Successfully logged out\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"Alextest10\",\n    \"password\": \"alex1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/logout",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Second Account",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"password\": \"test\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "createGroup",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();\r",
							"\r",
							"// Set the assignmentGroupName to the variable\r",
							"pm.globals.set(\"GroupId\", responseData._id);\r",
							"pm.globals.set(\"GroupName\", responseData.assignmentGroupName)\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"assignmentGroupName\": \"{{$randomDepartment}}\",\n    \"course\": \"DIT333\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set group resource",
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"link\": \"https://discord.gg/rUB2f9VD\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups/{{GroupId}}/set-resource/discord",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"{{GroupId}}",
						"set-resource",
						"discord"
					]
				}
			},
			"response": []
		},
		{
			"name": "getGroup",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/groups/{{GroupId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"{{GroupId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "inviteUserToGroup",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{user1Username}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups/{{GroupId}}/users",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"{{GroupId}}",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetUsersFromGroup",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/groups/{{GroupId}}/users",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"{{GroupId}}",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "getMyGroups",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/groups/myGroups",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"myGroups"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetUserFromGroup",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups/{{GroupId}}/users/{{user1Id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"{{GroupId}}",
						"users",
						"{{user1Id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteUserFromGroup",
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups/{{GroupId}}/users/{{user1Id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"{{GroupId}}",
						"users",
						"{{user1Id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout 2nd Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field 'message'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('message');",
							"});",
							"",
							"",
							"pm.test(\"The 'message' field is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is in an acceptable range\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'message' field value is 'Successfully logged out'\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.equal(\"Successfully logged out\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/logout",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field 'message'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('message');",
							"});",
							"",
							"",
							"pm.test(\"The 'message' field is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is in an acceptable range\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'message' field value is 'Successfully logged in'\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.equal(\"Successfully logged in\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{user1Username}}\",\n    \"password\": \"test\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "JoinGroup",
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/groups/{{GroupName}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"{{GroupName}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "deleteGroup",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/groups/{{GroupId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups",
						"{{GroupId}}"
					],
					"query": [
						{
							"key": "group",
							"value": "`{{GroupNameVar}}`",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();\r",
							"pm.globals.set(\"taskId\", responseData._id)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"taskName\": \"Do dishes\",\r\n    \"description\": \"description\",\r\n    \"dueDate\": \"2024-10-10\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/tasks/{{GroupId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"tasks",
						"{{GroupId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Task",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/tasks/{{taskId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"tasks",
						"{{taskId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Tasks By Group",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/tasks/getTasksByGroup/{{GroupId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"tasks",
						"getTasksByGroup",
						"{{GroupId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "updateTask",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"taskName\": \"New TaskName\",\r\n    \"assignee\": \"{{user1Username}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/tasks/{{taskId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"tasks",
						"{{taskId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Tasks",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/tasks/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"tasks",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User Tasks",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/tasks/myTasks",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"tasks",
						"tasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Task",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/tasks/{{taskId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"tasks",
						"{{taskId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Meeting",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();\r",
							"pm.globals.set(\"meetingId\", responseData._id)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"meetingName\": \"Testing\",\r\n    \"date\": \"2023-03-01\",\r\n    \"time\": \"14:20\",\r\n    \"meetingLocation\": \"Campus\",\r\n    \"meetingAgenda\": \"Testing\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/meetings/{{GroupId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"meetings",
						"{{GroupId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Meeting",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/meetings/{{meetingId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"meetings",
						"{{meetingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Meetings By Group",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/meetings/{{GroupId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"meetings",
						"{{GroupId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update meeting",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"meetingAgenda\": \"Hello hello\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/meetings/{{meetingId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"meetings",
						"{{meetingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Meetings",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/meetings/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"meetings",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Meeting",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/meetings/{{meetingId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"meetings",
						"{{meetingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User Meetings  ",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/meetings/MyMeetings",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"meetings",
						"MyMeetings"
					]
				}
			},
			"response": []
		},
		{
			"name": "ChangePassword",
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"newPassword\": \"test1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/changePassword",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"changePassword"
					]
				}
			},
			"response": []
		},
		{
			"name": "getAllUsers",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/users/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "GetUser",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/users/{{user1Username}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{user1Username}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/users/{{user1Username}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{user1Username}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete All Tasks",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/tasks/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"tasks",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete All Meetings",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/meetings/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"meetings",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete All Groups",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/groups",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"groups"
					]
				}
			},
			"response": []
		}
	]
}